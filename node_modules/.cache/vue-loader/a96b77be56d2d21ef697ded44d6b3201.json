{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\src\\views\\system\\function.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\src\\views\\system\\function.vue","mtime":1562381178273},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Vue from \"vue\";\r\nimport { parseTime } from \"@/utils\";\r\nimport { setTimeout, clearTimeout } from \"timers\";\r\nimport { Pagination } from \"vant\";\r\nimport {\r\n  getMenuTree,\r\n  getFunctionList,\r\n  addFunction,\r\n  updateFunction,\r\n  deleteFunction,\r\n  deleteSelectFunction\r\n} from \"@/api/orderList\";\r\n\r\nVue.use(Pagination);\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      list: [],\r\n      formLabelWidth: \"120px\",\r\n      SearchButtonLoading: false,\r\n      clearSearchButtonLoading: false,\r\n      importProdcutLoading: false,\r\n      listLoading: false,\r\n      addDialogVisible: false,\r\n      updateDialogVisible: false,\r\n      currentPage: 1, //当前页\r\n      pagesizes: [20, 40, 60, 80, 100], //单页最大显示条数\r\n      pagesize: 20, //单页内条数\r\n      clickFlag: null, // 单击定时器\r\n      mobileSearchShow: false,\r\n      mobileSearchButtonLoading: false,\r\n      tableMaxHeight: 0,\r\n      pageJumpIndex: 1,\r\n      nameInput: \"\",\r\n      treeData: [],\r\n      defaultProps: {\r\n        children: \"children\",\r\n        label: \"text\"\r\n      },\r\n      props: {\r\n        emitPath: false,\r\n        checkStrictly: true,\r\n        label: \"text\",\r\n        value: \"functionId\"\r\n      },\r\n      currentId: 0,\r\n      addForm: {\r\n        name: \"\",\r\n        func: \"\"\r\n      },\r\n      updateForm: {\r\n        name: \"\",\r\n        func: \"\"\r\n      },\r\n      parentMenu: [],\r\n      menuId: \"\",\r\n      multipleSelection:[]\r\n    };\r\n  },\r\n  created() {\r\n    this.getTreeData();\r\n    this.list = this.getOrderList();\r\n    this.device = this.$store.state.app.device;\r\n    window.addEventListener(\"resize\", this.getHeight);\r\n    this.getHeight();\r\n  },\r\n  destroyed() {\r\n    window.removeEventListener(\"resize\", this.getHeight);\r\n  },\r\n  computed: {\r\n    deviceVal() {\r\n      return this.$store.state.app.device;\r\n    }\r\n  },\r\n  watch: {\r\n    deviceVal(newVal, oldVal) {\r\n      this.device = newVal;\r\n    }\r\n  },\r\n  methods: {\r\n    // 获取树状图数据\r\n    getTreeData() {\r\n      getMenuTree().then(res => {\r\n        if ((res.status = 200)) {\r\n          console.log(res.data);\r\n          this.treeData = res.data;\r\n        }\r\n      });\r\n    },\r\n    // 获取表格列表\r\n    getOrderList() {\r\n      let orderList = [];\r\n      this.listLoading = true;\r\n      getFunctionList({ page: 1, rows: 50 }, \"?id=0\").then(res => {\r\n        let tableList = res.data.rows;\r\n        tableList.forEach(tableItem => {\r\n          const { name, code, id, parentId } = tableItem;\r\n          const orderItem = {\r\n            name: name,\r\n            code: code,\r\n            id: id,\r\n            parentId: parentId\r\n          };\r\n          orderList.push(orderItem);\r\n        });\r\n      });\r\n      this.listLoading = false;\r\n      return orderList;\r\n    },\r\n    //表格高度自适应\r\n    getHeight() {\r\n      let otherHeight = this.device == \"desktop\" ? 250 : 200;\r\n      this.tableMaxHeight = window.innerHeight - otherHeight;\r\n    },\r\n    //单击复制\r\n    handleUseful(row, column, cell, event) {\r\n      if (this.device == \"mobile\") return;\r\n      if (this.clickFlag) {\r\n        clearTimeout(this.clickFlag);\r\n        this.clickFlag = null;\r\n      }\r\n      this.clickFlag = setTimeout(() => {\r\n        let count = 0;\r\n        if (column.label == undefined) return;\r\n        if (column.label == \"操作\") {\r\n        } else {\r\n          let copyText = event.target.innerText;\r\n          if (copyText != \"\") {\r\n            var inputElement = document.getElementById(\"copy_content\");\r\n            inputElement.value = copyText;\r\n            inputElement.select();\r\n            document.execCommand(\"Copy\");\r\n            this.$message({\r\n              message: \"复制成功\",\r\n              type: \"success\"\r\n            });\r\n          } else {\r\n            this.$message.error(\"复制失败，内容可能为空\");\r\n          }\r\n        }\r\n      }, 300);\r\n    },\r\n    //选择表格尺寸\r\n    handleSizeChange(val) {\r\n      this.listLoading = true;\r\n      setTimeout(() => {\r\n        this.pagesize = val;\r\n        this.listLoading = false;\r\n      }, 500);\r\n    },\r\n    //选择表格当前页数\r\n    handleCurrentChange(val) {\r\n      this.listLoading = true;\r\n      setTimeout(() => {\r\n        this.currentPage = val;\r\n        this.listLoading = false;\r\n      }, 500);\r\n    },\r\n    // 新增\r\n    handleAdd() {\r\n      this.addDialogVisible = true;\r\n      getMenuTree().then(res => {\r\n        this.parentMenu = res.data;\r\n      });\r\n    },\r\n    // 验证新增\r\n    addVerify() {\r\n      if (this.addForm.name == \"\") {\r\n        this.$message.error(\"请输入功能名称\");\r\n        return false;\r\n      }\r\n      if (this.addForm.func == \"\") {\r\n        this.$message.error(\"请输入功能\");\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    // 取消新增\r\n    handleAddCancel() {\r\n      this.addDialogVisible = false;\r\n    },\r\n    // 确认新增\r\n    handleAddConfirm() {\r\n      if (!this.addVerify()) return;\r\n      var timestamp = new Date().getTime();\r\n      let paramsObj = {\r\n        parentId: this.currentId,\r\n        name: this.addForm.name,\r\n        code: this.addForm.func,\r\n        menuId: this.menuId\r\n      };\r\n      addFunction(paramsObj).then(res => {\r\n        if (res.status == 200) {\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"新增权限成功\"\r\n          });\r\n        }\r\n      });\r\n\r\n      this.addDialogVisible = false;\r\n    },\r\n    // 关联菜单改变\r\n    handleSelectMenuChange(e) {\r\n      this.menuId = e;\r\n    },\r\n    // 更新\r\n    handleUpdateClick(row) {\r\n      this.updateDialogVisible = true;\r\n      getMenuTree().then(res => {\r\n        this.parentMenu = res.data;\r\n        this.updateForm.name = row.name;\r\n        this.updateForm.func = row.code;\r\n        this.currentId = row.id;\r\n      });\r\n    },\r\n    // 取消更新\r\n    handleUpdateCancel() {\r\n      this.updateDialogVisible = false;\r\n    },\r\n    // 验证更新\r\n    updateVerify() {\r\n      console.log(this.updateForm.name);\r\n      if (this.updateForm.name == \"\") {\r\n        this.$message.error(\"请输入功能名称\");\r\n        return false;\r\n      }\r\n      if (this.updateForm.func == \"\") {\r\n        this.$message.error(\"请输入功能\");\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    // 确认更新\r\n    handleUpdateConfirm(row) {\r\n      if (!this.updateVerify()) return;\r\n      let paramsObj = {\r\n        id: this.currentId,\r\n        name: this.updateForm.name,\r\n        code: this.updateForm.func\r\n      };\r\n      updateFunction(paramsObj).then(res => {\r\n        if (res.status == 200) {\r\n          this.$message({\r\n            message: \"更新成功\",\r\n            type: \"succes\"\r\n          });\r\n        }\r\n      });\r\n      this.updateDialogVisible = false;\r\n    },\r\n    // 删除\r\n    handleDeleteClick(row) {\r\n      let id = row.id;\r\n      this.$confirm(\"此操作将永久删除该权限, 是否继续?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      })\r\n        .then(() => {\r\n          this.listLoading = true;\r\n          deleteFunction({ id: row.id }).then(res => {\r\n            if (res.status === 200) {\r\n              this.reloadPage();\r\n              this.$message({\r\n                type: \"success\",\r\n                message: \"删除权限成功\"\r\n              });\r\n              this.dialogTableVisible = false;\r\n            } else {\r\n              this.$message.error(\"删除失败\");\r\n              this.dialogTableVisible = false;\r\n            }\r\n          });\r\n          this.listLoading = false;\r\n        })\r\n        .catch(error => {\r\n          this.$message({\r\n            type: \"info\",\r\n            message: \"已取消删除\"\r\n          });\r\n          this.dialogTableVisible = false;\r\n        });\r\n    },\r\n    // 批量删除\r\n    handleDeleteSelect() {\r\n       this.$confirm(\"此操作将永久删除该权限, 是否继续?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      })\r\n        .then(() => {\r\n          if (this.multipleSelection.length === 0) {\r\n            this.$message.error(\"未选择数据\");\r\n            return;\r\n          }\r\n          let ids = [];\r\n          this.multipleSelection.forEach(selectItem => {\r\n            ids.push(selectItem.id);\r\n          });\r\n          let idsStr = ids.join(\",\");\r\n          deleteSelectFunction({ ids: idsStr }).then(res => {\r\n            if (res.status === 200) {\r\n              this.reloadPage();\r\n              this.$message({\r\n                type: \"success\",\r\n                message: \"批量删除权限成功\"\r\n              });\r\n            } else {\r\n              this.$message.error(\"删除失败\");\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          this.$message({\r\n            type: \"info\",\r\n            message: \"已取消删除\"\r\n          });\r\n        });\r\n    },\r\n    // 树形图节点点击事件\r\n    handleNodeClick(e) {\r\n      this.currentId = e.functionId;\r\n      let id = `?id=${e.id}`;\r\n      let orderList = [];\r\n      this.listLoading = true;\r\n      getFunctionList({ page: 1, rows: 50 }, id).then(res => {\r\n        let tableList = res.data.rows;\r\n        tableList.forEach(tableItem => {\r\n          const { name, code, id, parentId } = tableItem;\r\n          const orderItem = {\r\n            name: name,\r\n            code: code,\r\n            id: id,\r\n            parentId: parentId\r\n          };\r\n          orderList.push(orderItem);\r\n        });\r\n      });\r\n      this.listLoading = false;\r\n      this.list = orderList;\r\n    },\r\n    // 选择发生改变\r\n    handleSelectionChange(val) {\r\n      this.multipleSelection = val;\r\n    },\r\n    // 重载页面\r\n    reloadPage() {},\r\n\r\n    /* 移动端事件 */\r\n\r\n    //分页器\r\n    handlePageChange() {\r\n      this.listLoading = true;\r\n      setTimeout(() => {\r\n        this.listLoading = false;\r\n      }, 600);\r\n    },\r\n    //限制页面跳转输入框只能输入数字\r\n    jumpPageInput() {\r\n      this.pageJumpIndex = this.pageJumpIndex.replace(/[^\\d]/g, \"\");\r\n    },\r\n    //跳转指定页面\r\n    handleJumpPage() {\r\n      let jumpPage = parseInt(this.pageJumpIndex);\r\n      if (jumpPage == this.currentPage) return;\r\n      if (jumpPage > Math.ceil(this.list.length / this.pagesize)) {\r\n        jumpPage = Math.ceil(this.list.length / this.pagesize);\r\n      }\r\n      if (jumpPage < 1) {\r\n        jumpPage = 1;\r\n      }\r\n      this.listLoading = true;\r\n      setTimeout(() => {\r\n        this.pageJumpIndex = jumpPage;\r\n        this.currentPage = jumpPage;\r\n        this.listLoading = false;\r\n      }, 1000);\r\n    }\r\n  }\r\n};\r\n",null]}