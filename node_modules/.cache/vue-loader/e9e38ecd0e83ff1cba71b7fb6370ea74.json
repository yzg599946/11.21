{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\src\\views\\system\\carte.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\src\\views\\system\\carte.vue","mtime":1562308302967},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Vue from \"vue\";\r\nimport {\r\n  getMenuList,\r\n  updateMenuInquired,\r\n  addMenu,\r\n  updateMenu,\r\n  deleteMenu,\r\n  deleteSelectMenu,\r\n  generateMenu,\r\n  moveUpMenu,\r\n  moveDownMenu\r\n} from \"@/api/orderList\";\r\nimport {\r\n  Pagination,\r\n  Button,\r\n  Popup,\r\n  NavBar,\r\n  Cell,\r\n  CellGroup,\r\n  DatetimePicker,\r\n  Picker,\r\n  Field,\r\n  Icon,\r\n  Toast,\r\n  ActionSheet,\r\n  Search\r\n} from \"vant\";\r\n\r\nVue.use(Pagination);\r\nVue.use(Button);\r\nVue.use(Popup);\r\nVue.use(NavBar);\r\nVue.use(Cell);\r\nVue.use(CellGroup);\r\nVue.use(DatetimePicker);\r\nVue.use(Picker);\r\nVue.use(Field);\r\nVue.use(Icon);\r\nVue.use(Toast);\r\nVue.use(ActionSheet);\r\nVue.use(Search);\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      list: [],\r\n      childrenList: [],\r\n      listLoading: false,\r\n      clearSearchButtonLoading: false,\r\n      addDialogVisible: false,\r\n      updateDialogVisible: false,\r\n      generateDialogVisible: false,\r\n      nameInput: \"\",\r\n      linkInput: \"\",\r\n      formLabelWidth: \"120px\",\r\n      dialogTableVisible: false,\r\n      currentPage: 1, //当前页\r\n      pagesizes: [50, 100, 200], //单页最大显示条数\r\n      pagesize: 50, //单页内条数\r\n      device: \"\",\r\n      mobileSearchShow: false,\r\n      mobileSearchButtonLoading: false,\r\n      tableMaxHeight: 0,\r\n      childrenListTitle: \"\",\r\n      parentMenu: [],\r\n      addForm: {\r\n        parentMenu: \"\",\r\n        childrenName: \"\",\r\n        url: \"\"\r\n      },\r\n      updateForm: {\r\n        parentMenu: \"\",\r\n        childrenName: \"\",\r\n        url: \"\",\r\n        mode: \"\"\r\n      },\r\n      generateForm: {\r\n        chineseName: \"\",\r\n        englishName: \"\"\r\n      },\r\n      updateId: \"\",\r\n      paramsStorage: {},\r\n      childrenParamsStorage: {},\r\n      multipleSelection: [],\r\n      returnButton: false\r\n    };\r\n  },\r\n  created() {\r\n    this.list = this.getOrderList();\r\n    this.device = this.$store.state.app.device;\r\n    this.getHeight();\r\n    this.getParentMenuList();\r\n  },\r\n  computed: {\r\n    deviceVal() {\r\n      return this.$store.state.app.device;\r\n    }\r\n  },\r\n  watch: {\r\n    deviceVal(newVal, oldVal) {\r\n      this.device = newVal;\r\n    }\r\n  },\r\n  methods: {\r\n    // 获取表格列表\r\n    getOrderList() {\r\n      let orderList = [];\r\n      getMenuList({ contains: false, page: 1, rows: 500 }).then(res => {\r\n        let tableList = res.data.rows;\r\n        tableList.forEach(tableItem => {\r\n          const { name, uri, mode, sort, id, parentId } = tableItem;\r\n          const orderItem = {\r\n            name: name,\r\n            linkAddress: uri,\r\n            isUseful: mode,\r\n            sort: sort,\r\n            id: id,\r\n            parentId: parentId\r\n          };\r\n          orderList.push(orderItem);\r\n        });\r\n      });\r\n      return orderList;\r\n    },\r\n    // 获取所有一级菜单\r\n    getParentMenuList() {\r\n      let orderList = [];\r\n      updateMenuInquired().then(res => {\r\n        let tableList = res.data;\r\n        tableList.forEach(tableItem => {\r\n          const { name, id } = tableItem;\r\n          const orderItem = {\r\n            label: name,\r\n            value: id\r\n          };\r\n          orderList.push(orderItem);\r\n        });\r\n      });\r\n      this.parentMenu = orderList;\r\n    },\r\n    //表格高度自适应\r\n    getHeight() {\r\n      let otherHeight = this.device == \"desktop\" ? 250 : 200;\r\n      this.tableMaxHeight = window.innerHeight - otherHeight;\r\n    },\r\n    // 表格条数变化\r\n    handleSizeChange(val) {\r\n      this.listLoading = true;\r\n      setTimeout(() => {\r\n        this.pagesize = val;\r\n        this.listLoading = false;\r\n      }, 500);\r\n    },\r\n    //选择表格当前页数\r\n    handleCurrentChange(val) {\r\n      this.listLoading = true;\r\n      setTimeout(() => {\r\n        this.currentPage = val;\r\n        this.listLoading = false;\r\n      }, 500);\r\n    },\r\n    // 查看子菜单\r\n    handleChildrenMenu(row, column, event) {\r\n      if (row.parentId != 0) return;\r\n      this.returnButton = true;\r\n      this.childrenParamsStorage = {\r\n        parentId: row.id,\r\n        contains: false,\r\n        page: 1,\r\n        rows: 500\r\n      };\r\n      getMenuList(this.childrenParamsStorage).then(res => {\r\n        let orderList = [];\r\n        let tableList = res.data.rows;\r\n        tableList.forEach(tableItem => {\r\n          const { name, uri, mode, id, parentId, sort } = tableItem;\r\n          const orderItem = {\r\n            name: name,\r\n            linkAddress: uri,\r\n            isUseful: mode,\r\n            id: id,\r\n            parentId: parentId,\r\n            sort: sort\r\n          };\r\n          orderList.push(orderItem);\r\n        });\r\n        this.list = orderList;\r\n      });\r\n    },\r\n    // 返回主菜单列表\r\n    handleReturnList() {\r\n      this.returnButton = false;\r\n      this.list = this.getOrderList();\r\n    },\r\n    // 搜索\r\n    handleSearch() {\r\n      let name = this.nameInput;\r\n      let uri = this.linkInput;\r\n      let paramsObj = { contains: false, page: 1, rows: 500 };\r\n      name != \"\" ? (paramsObj.name = name) : \"\";\r\n      uri != \"\" ? (paramsObj.uri = uri) : \"\";\r\n      let orderList = [];\r\n      this.paramsStorage = paramsObj;\r\n      getMenuList(paramsObj).then(res => {\r\n        let tableList = res.data.rows;\r\n        tableList.forEach(tableItem => {\r\n          const { name, uri, mode, sort, id } = tableItem;\r\n          const orderItem = {\r\n            name: name,\r\n            linkAddress: uri,\r\n            isUseful: mode,\r\n            sort: sort,\r\n            id: id\r\n          };\r\n          orderList.push(orderItem);\r\n        });\r\n        this.list = orderList;\r\n      });\r\n    },\r\n    // 清空搜索项\r\n    handleClearSearch() {\r\n      this.nameInput = \"\";\r\n      this.linkInput = \"\";\r\n    },\r\n    handleClick(row) {},\r\n    // 新增\r\n    handleAdd() {\r\n      this.addDialogVisible = true;\r\n    },\r\n    // 验证新增\r\n    addMenuVerify() {\r\n      if (this.addForm.parentMenu == null) {\r\n        this.$message.error(\"请选择所属菜单\");\r\n        return false;\r\n      }\r\n      if (this.addForm.childrenName == \"\") {\r\n        this.$message.error(\"请输入子菜单名\");\r\n        return false;\r\n      }\r\n      if (this.addForm.url == \"\") {\r\n        this.$message.error(\"请输入Url\");\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    // 确认新增\r\n    handleAddConfirm() {\r\n      if (!this.addMenuVerify) return;\r\n      addMenu({\r\n        name: this.addForm.childrenName,\r\n        parentId: this.addForm.parentMenu,\r\n        uri: this.addForm.url\r\n      })\r\n        .then(res => {\r\n          if (res.status == 200) {\r\n            this.reloadPage();\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"新增成功\"\r\n            });\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n      this.addDialogVisible = false;\r\n    },\r\n    // 取消新增\r\n    handleAddCancel() {\r\n      this.addDialogVisible = false;\r\n    },\r\n    // 更新\r\n    handleUpdateClick(row) {\r\n      this.updateForm.mode = row.isUseful;\r\n      this.updateForm.childrenName = row.name;\r\n      this.updateForm.url = row.linkAddress;\r\n      this.updateForm.parentMenu = row.parentId;\r\n      this.updateId = row.id;\r\n      this.updateDialogVisible = true;\r\n    },\r\n    // 验证更新\r\n    updateMenuVerify() {\r\n      if (this.updateForm.childrenName == \"\") {\r\n        this.$message.error(\"请输入子菜单名\");\r\n        return false;\r\n      }\r\n      if (this.updateForm.url == \"\") {\r\n        this.$message.error(\"请输入Url\");\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    // 确认更新\r\n    handleUpdateConfirm() {\r\n      if (!this.updateMenuVerify) return;\r\n      updateMenu({\r\n        id: this.updateId,\r\n        parentId: this.updateForm.parentMenu,\r\n        name: this.updateForm.childrenName,\r\n        uri: this.updateForm.url,\r\n        mode: this.updateForm.mode\r\n      })\r\n        .then(res => {\r\n          console.log(res);\r\n          if (res.status == 200) {\r\n            this.reloadPage();\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"更新成功\"\r\n            });\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n      this.updateDialogVisible = false;\r\n    },\r\n    // 取消更新\r\n    handleUpdateCancel() {\r\n      this.updateDialogVisible = false;\r\n    },\r\n    // 删除\r\n    handleDeleteClick(row) {\r\n      this.$confirm(\"此操作将永久删除该菜单, 是否继续?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      })\r\n        .then(() => {\r\n          this.listLoading = true;\r\n          deleteMenu({ id: row.id }).then(res => {\r\n            if (res.status === 200) {\r\n              this.reloadPage();\r\n              this.$message({\r\n                type: \"success\",\r\n                message: \"删除菜单成功\"\r\n              });\r\n              this.dialogTableVisible = false;\r\n            } else {\r\n              this.$message.error(\"删除失败\");\r\n              this.dialogTableVisible = false;\r\n            }\r\n          });\r\n          this.listLoading = false;\r\n        })\r\n        .catch(error => {\r\n          this.$message({\r\n            type: \"info\",\r\n            message: \"已取消删除\"\r\n          });\r\n          this.dialogTableVisible = false;\r\n        });\r\n    },\r\n    // 批量删除\r\n    handleDeleteSelect() {\r\n      this.$confirm(\"此操作将永久删除该菜单, 是否继续?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      })\r\n        .then(() => {\r\n          if (this.multipleSelection.length === 0) {\r\n            this.$message.error(\"未选择数据\");\r\n            return;\r\n          }\r\n          let ids = [];\r\n          this.multipleSelection.forEach(selectItem => {\r\n            ids.push(selectItem.id);\r\n          });\r\n          let idsStr = ids.join(\",\");\r\n          deleteSelectMenu({ ids: idsStr }).then(res => {\r\n            if (res.status === 200) {\r\n              this.reloadPage();\r\n              this.$message({\r\n                type: \"success\",\r\n                message: \"批量删除菜单成功\"\r\n              });\r\n            } else {\r\n              this.$message.error(\"删除失败\");\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          this.$message({\r\n            type: \"info\",\r\n            message: \"已取消删除\"\r\n          });\r\n        });\r\n    },\r\n    // 一键生成\r\n    handleGenerate() {\r\n      this.generateDialogVisible = true;\r\n    },\r\n    // 验证生成\r\n    generateVerify() {\r\n      if (this.generateForm.chineseName == \"\") {\r\n        this.$message.error(\"请输入中文名\");\r\n        return false;\r\n      }\r\n      if (this.generateForm.englishName == \"\") {\r\n        this.$message.error(\"请输入英文名\");\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    // 确认生成\r\n    handleGenerateConfirm() {\r\n      if (!this.generateVerify()) return;\r\n      generateMenu({\r\n        chinese: this.generateForm.chineseName,\r\n        english: this.generateForm.englishName\r\n      }).then(res => {\r\n        console.log(res);\r\n      });\r\n    },\r\n    // 取消生成\r\n    handleGenerateCancel() {},\r\n    // 菜单上移\r\n    handleMoveUpClick(row) {\r\n      var timestamp = new Date().getTime();\r\n      console.log(timestamp);\r\n      moveUpMenu({\r\n        sort: row.sort,\r\n        parentId: row.parentId,\r\n        id: row.id,\r\n        _: timestamp\r\n      }).then(res => {\r\n        if (res.status == 200) {\r\n          this.reloadPage();\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功\"\r\n          });\r\n        }\r\n      });\r\n    },\r\n    // 菜单下移\r\n    handleMoveDownClick(row) {\r\n      var timestamp = new Date().getTime();\r\n      moveDownMenu({\r\n        sort: row.sort,\r\n        parentId: row.parentId,\r\n        id: row.id,\r\n        _: timestamp\r\n      }).then(res => {\r\n        if (res.status == 200) {\r\n          this.reloadPage();\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功\"\r\n          });\r\n        }\r\n      });\r\n    },\r\n    // 选择发生改变\r\n    handleSelectionChange(val) {\r\n      this.multipleSelection = val;\r\n    },\r\n    // 重载页面\r\n    reloadPage() {\r\n      if (!this.returnButton) {\r\n        if (JSON.stringify(this.paramsStorage) == \"{}\") {\r\n          this.list = this.getOrderList();\r\n        } else {\r\n          let searchList = [];\r\n          getMenuList(this.paramsStorage).then(res => {\r\n            const tableData = res.data.rows;\r\n            tableData.forEach(tableItem => {\r\n              const { id, username, name, telephone, mode } = tableItem;\r\n              const orderItem = {\r\n                id: id,\r\n                username: username,\r\n                name: name,\r\n                phoneNumber: telephone,\r\n                isUseful: mode\r\n              };\r\n              searchList.push(orderItem);\r\n            });\r\n            this.list = searchList;\r\n          });\r\n        }\r\n      } else {\r\n        let searchList = [];\r\n        getMenuList(this.childrenParamsStorage).then(res => {\r\n          let orderList = [];\r\n          let tableList = res.data.rows;\r\n          tableList.forEach(tableItem => {\r\n            const { name, uri, mode, id, parentId, sort } = tableItem;\r\n            const orderItem = {\r\n              name: name,\r\n              linkAddress: uri,\r\n              isUseful: mode,\r\n              id: id,\r\n              parentId: parentId,\r\n              sort: sort\r\n            };\r\n            orderList.push(orderItem);\r\n          });\r\n          this.list = orderList;\r\n        });\r\n      }\r\n    },\r\n\r\n    /* 移动端事件 */\r\n\r\n    //新增\r\n    handleSearchMobile() {},\r\n    //取消新增\r\n    handleAddMobileCancel() {},\r\n    //确认新增\r\n    handleMobileAdd() {},\r\n    //清空所选\r\n    handleSearchMobileClearAll() {},\r\n    //分页器改变\r\n    handlePageChange() {},\r\n    //返回列表\r\n    handleDetailCancel() {\r\n      this.mobileDetailShow = !this.mobileDetailShow;\r\n    }\r\n  }\r\n};\r\n",null]}