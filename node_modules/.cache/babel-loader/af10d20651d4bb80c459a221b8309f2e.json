{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\src\\utils\\request.js","mtime":1564213530284},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\yet\\\\project\\\\longhuiteng_management_system\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\n// import { removeToken } from './auth'\n// import router from 'vue-router'\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  // withCredentials: true, // send cookies when cross-domain requests\n  transformRequest: [function (data) {\n    data = _qs.default.stringify(data);\n    return data;\n  }],\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  // timeout: 5000, // request timeout\n  withCredentials: true\n}); // request interceptor\n\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  if (_store.default.getters.token) {\n    // let each request carry token\n    // ['X-Token'] is a custom headers key\n    // please modify it according to the actual situation\n    config.headers['X-Token'] = (0, _auth.getToken)();\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\r\n * If you want to get http information such as headers or status\r\n * Please return  response => response\r\n*/\n\n/**\r\n * Determine the request status by custom code\r\n * Here is just an example\r\n * You can also judge the status by HTTP Status Code\r\n */\nfunction (response) {\n  if (response.config.responseType === 'blob') {\n    return response.data;\n  }\n\n  var res = response.data;\n\n  if (typeof res === 'string') {\n    if (res.indexOf('没有权限，请不要乱来!') > -1) {\n      // Message({\n      //   message: '没有权限，请不要乱来!',\n      //   type: 'error',\n      //   duration: 5 * 1000\n      // })\n      return;\n    }\n  }\n\n  if (res.status !== 200) {\n    // Message({\n    //   message: res.msg || 'Error',\n    //   type: 'error',\n    //   duration: 5 * 1000\n    // })\n    if (res.status === 400 && res.msg === '暂无信息') {\n      return res;\n    }\n\n    if (res.status === 203) {\n      (0, _elementUi.Message)({\n        message: res.msg || 'Error',\n        type: 'error',\n        duration: 5 * 1000\n      });\n    }\n\n    if (res.status === 407) {\n      // session失效\n      // Message({\n      //   message: res.msg || 'Error',\n      //   type: 'error'\n      // })\n      _store.default.dispatch('user/resetToken').then(function () {\n        location.reload();\n      }); // removeLoginStatus()\n      // window.location.href = '/login'\n      // router.push({ path: '/' })\n\n    }\n\n    (0, _elementUi.Message)({\n      message: res.msg,\n      type: 'error',\n      duration: 5 * 1000\n    });\n    return Promise.reject(new Error(res.msg || 'Error'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  (0, _elementUi.Message)({\n    message: '系统繁忙,请联系管理员',\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",null]}