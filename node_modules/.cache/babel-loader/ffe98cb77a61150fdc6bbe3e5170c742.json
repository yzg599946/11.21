{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\el-bigdata-table\\src\\virtual-table-body-render.js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\el-bigdata-table\\src\\virtual-table-body-render.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\yet\\project\\longhuiteng_management_system\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = render;\n\nrequire(\"core-js/modules/es6.string.fixed\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nfunction render(h) {\n  var _this = this;\n\n  var columnsHidden = this.columns.map(function (column, index) {\n    return _this.isColumnHidden(index);\n  });\n  var rows = this.data;\n\n  if (this.store.states.lazy && Object.keys(this.store.states.lazyTreeNodeMap).length) {\n    rows = rows.reduce(function (prev, item) {\n      prev.push(item);\n\n      var rowKey = _this.store.table.getRowKey(item);\n\n      var parent = _this.store.states.treeData[rowKey];\n\n      if (parent && parent.children && parent.hasChildren) {\n        var tmp = [];\n\n        var traverse = function traverse(children) {\n          if (!children) return;\n          children.forEach(function (key) {\n            tmp.push(_this.store.states.lazyTreeNodeMap[key]);\n\n            if (_this.store.states.treeData[key]) {\n              traverse(_this.store.states.treeData[key].children);\n            }\n          });\n        };\n\n        traverse(parent.children);\n        prev = prev.concat(tmp);\n      }\n\n      return prev;\n    }, []);\n  }\n\n  return h(\"div\", {\n    \"style\": [{\n      height: \"\".concat(this.table.virtualBodyHeight, \"px\")\n    }],\n    \"class\": ['el-table__virtual-wrapper', {\n      'el-table--fixed__virtual-wrapper': this.fixed\n    }],\n    \"directives\": [{\n      name: \"mousewheel\",\n      value: this.table.handleFixedMousewheel\n    }]\n  }, [h(\"div\", {\n    \"style\": [{\n      transform: \"translateY(\".concat(this.table.innerTop, \"px)\")\n    }]\n  }, [h(\"table\", {\n    \"class\": \"el-table__body\",\n    \"attrs\": {\n      \"cellspacing\": \"0\",\n      \"cellpadding\": \"0\",\n      \"border\": \"0\"\n    }\n  }, [h(\"colgroup\", [this._l(this.columns, function (column, cellIndex) {\n    return columnsHidden[cellIndex] && _this.fixed ? '' : h(\"col\", {\n      \"attrs\": {\n        \"name\": column.id\n      }\n    });\n  })]), h(\"tbody\", [this._l(rows, function (row, index) {\n    var $index = _this.getIndex(index);\n\n    var rowKey = _this.table.rowKey ? _this.getKeyOfRow(row, $index) : $index;\n    var treeNode = _this.treeData && _this.treeData[rowKey];\n\n    var rowClasses = _this.getRowClass(row, $index);\n\n    if (treeNode) {\n      rowClasses.push('el-table__row--level-' + treeNode.level);\n    }\n\n    var tr = h(\"tr\", {\n      \"directives\": [{\n        name: \"show\",\n        value: treeNode ? treeNode.display : true\n      }],\n      \"style\": _this.rowStyle ? _this.getRowStyle(row, $index) : null,\n      \"key\": rowKey,\n      \"on\": {\n        \"dblclick\": function dblclick($event) {\n          return _this.handleDoubleClick($event, row);\n        },\n        \"click\": function click($event) {\n          return _this.handleClick($event, row);\n        },\n        \"contextmenu\": function contextmenu($event) {\n          return _this.handleContextMenu($event, row);\n        },\n        \"mouseenter\": function mouseenter(_) {\n          return _this.handleMouseEnter($index);\n        },\n        \"mouseleave\": function mouseleave(_) {\n          return _this.handleMouseLeave();\n        }\n      },\n      \"class\": rowClasses\n    }, [_this._l(_this.columns, function (column, cellIndex) {\n      var _this$getSpan = _this.getSpan(row, column, $index, cellIndex),\n          rowspan = _this$getSpan.rowspan,\n          colspan = _this$getSpan.colspan;\n\n      if (!rowspan || !colspan || columnsHidden[cellIndex] && _this.fixed) {\n        return '';\n      } else {\n        var columnData = Object.assign({}, column);\n\n        if (colspan !== 1) {\n          columnData.realWidth = columnData.realWidth * colspan;\n        }\n\n        var data = {\n          store: _this.store,\n          _self: _this.context || _this.table.$vnode.context,\n          column: columnData,\n          row: row,\n          $index: $index\n        };\n\n        if (cellIndex === _this.firstDefaultColumnIndex && treeNode) {\n          data.treeNode = {\n            hasChildren: treeNode.hasChildren || treeNode.children && treeNode.children.length,\n            expanded: treeNode.expanded,\n            indent: treeNode.level * _this.treeIndent,\n            level: treeNode.level,\n            loaded: treeNode.loaded,\n            rowKey: rowKey\n          };\n        }\n\n        return h(\"td\", {\n          \"style\": [{\n            height: _this.table.rowHeight + 'px'\n          }, _this.getCellStyle($index, cellIndex, row, column)],\n          \"class\": _this.getCellClass($index, cellIndex, row, column),\n          \"attrs\": {\n            \"rowspan\": rowspan,\n            \"colspan\": colspan\n          },\n          \"on\": {\n            \"mouseenter\": function mouseenter($event) {\n              return _this.handleCellMouseEnter($event, row);\n            },\n            \"mouseleave\": _this.handleCellMouseLeave\n          }\n        }, [column.renderCell.call(_this._renderProxy, h, data, columnsHidden[cellIndex])]);\n      }\n    })]);\n\n    if (_this.hasExpandColumn && _this.store.isRowExpanded(row)) {\n      return [tr, h(\"tr\", [h(\"td\", {\n        \"attrs\": {\n          \"colspan\": _this.columns.length\n        },\n        \"class\": \"el-table__expanded-cell\"\n      }, [_this.table.renderExpanded ? _this.table.renderExpanded(h, {\n        row: row,\n        $index: $index,\n        store: _this.store\n      }) : ''])])];\n    } else {\n      return tr;\n    }\n  }).concat(h(\"el-tooltip\", {\n    \"attrs\": {\n      \"effect\": this.table.tooltipEffect,\n      \"placement\": \"top\",\n      \"content\": this.tooltipContent\n    },\n    \"ref\": \"tooltip\"\n  }))])])])]);\n}",null]}